#include <stdio.h>
#include <stdlib.h>

struct Queue
{
    int *a;
    int front;
    int rear;
    int size;
};

int overflow(struct Queue *q)
{
    if ((q->front == 0 && q->rear == q->size - 1) || (q->rear == (q->front - 1) % (q->size)))
    {
        return 1;
    }
    return 0;
}

int underflow(struct Queue *q)
{
    if (q->front == -1)
        return 1;
    return 0;
}

void enqueue(struct Queue *q, int value)
{
    if (overflow(q))
    {
        printf("Queue overflow\n");
        return;
    }

    if (q->front == -1)
    {
        q->front = 0;
    }
    q->rear = (q->rear + 1) % q->size;
    q->a[q->rear] = value;
    printf("Inserted %d\n", value);
}

int dequeue(struct Queue *q)
{
    if (underflow(q))
    {
        printf("Queue underflow\n");
        return -1;
    }

    int value = q->a[q->front];
    if (q->front == q->rear)
    {
        q->front = -1;
        q->rear = -1;
    }
    else
    {
        q->front = (q->front + 1) % q->size;
    }

    printf("Deleted %d\n", value);
    return value;
}

void display(struct Queue *q)
{
    if (underflow(q))
    {
        printf("Queue is empty\n");
        return;
    }

    printf("Queue elements: ");
    int i = q->front;
    while (i != q->rear)
    {
        printf("%d  ", q->a[i]);
        i = (i + 1) % q->size;
    }
    printf("%d\n", q->a[i]);
}

int main()
{
    int size;

    printf("Enter the size of the queue: ");
    scanf("%d", &size);
    struct Queue q;
    q.size = size;
    q.front = -1;
    q.rear = -1;
    q.a = (int *)malloc(size * sizeof(int));

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    display(&q);

    dequeue(&q);
    dequeue(&q);

    display(&q);

    enqueue(&q, 60);
    enqueue(&q, 70);

    display(&q);

    free(q.a);

    return 0;
}
