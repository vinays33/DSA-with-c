// stack push and pop oprations....
#include <stdio.h>
#include <stdlib.h>
struct stack
{
    int *s;
    int size;
    int tos;
} s1;

int ISempty()
{
    return (s1.tos == -1);
}
int ISfull()
{
    return (s1.tos == s1.size - 1);
}
int pop()
{
    int x = -1;
    if (!ISempty())
    {
        x = s1.s[s1.tos];
        s1.tos--;
    }
    else
    {
        printf("\nstack is empty ");
    }
    return x;
}
int peek()
{
    int x = -1;
    if (!ISempty())
    {
        x = s1.s[s1.tos];
        // s1.tos--;
    }
    else
    {
        printf("\nstack is empty ");
    }
    return x;
}
void push(int element)
{
    if (!ISfull())
    {
        s1.tos++;
       s1.s[s1.tos] = element;
    }
    else
    {
        printf("the stack is full ");
    }
}
void display()
{
    if (!ISempty())
    {
        for (int i = 0; i <= s1.tos; i++)
        {
            printf("%d", s1.s[i]);
        }
        printf("\n");
    }
    else
    {
        printf("\nstack is empty ");
    }
}
int main()
{

    printf("\nthe bytes allocated is %ld", sizeof(s1));
    s1.size = 0;
    s1.tos = -1;
    printf("\nenter the size of the stack :");
    scanf("%d", &s1.size);
    s1.s = (int *)malloc(s1.size * sizeof(int));
    int e;
    for (int i = 0; i < s1.size; i++)
    {
        printf("\nenter the element :");
        scanf("%d", &e);
        push(e);
    }
    printf("peek function of stack\n");
    peek();
    printf("the peep element is %d\n", peek(s1));

    printf("display function of stack\n");
    display();
    // printf("\nthe dispaly element is %d",display(s1));

    printf("\npop function of stack :");
    pop();
    printf("\nthe pop element is %d\n", pop(s1));

    printf("\npeek function of stack after pop :");
    display();
    // printf("\nthe dispaly element is %d",display(s1));

    free(s1.s);
    return 0;
}
